<repositories>
    <repository>
        ...
        <releases>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
            <checksumPolicy>warn</checksumPolicy>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>never</updatePolicy>
            <checksumPolicy>fail</checksumPolicy>
        </snapshots>
        ...
    </repository>
</repositories>
<pluginRepositories>
    <pluginRepository>
        ...
        <releases>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
            <checksumPolicy>warn</checksumPolicy>
        </releases>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
            <checksumPolicy>fail</checksumPolicy>
        </snapshots>
        ...
    </pluginRepository>
</pluginRepositories>




pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                git 'https://github.com/your-username/your-repo.git'
            }
        }
        
        stage('Version Checking') {
            steps {
                script {
                    def pomXml = readFile 'pom.xml'
                    def version = pomXml.replaceAll("(?s).*<version>(.+?)</version>.*", '$1').trim()
                    
                    echo "Project version: ${version}"
                    
                    // Additional version checking logic goes here
                    // ...
                }
            }
        }
        
        stage('Build') {
            steps {
                // Execute Maven build
                sh 'mvn clean install'
            }
        }
        
        stage('Test Coverage') {
            steps {
                // Generate test coverage reports (e.g., with JaCoCo)
                // ...
            }
        }
        
        stage('SonarQube Code Quality') {
            steps {
                // Run SonarQube analysis on the code
                // ...
            }
        }
        
        stage('Nexus IQ Scan') {
            steps {
                // Run Nexus IQ scan on the built artifacts
                // ...
            }
        }
        
        stage('Push to Nexus Repository') {
            steps {
                // Push artifacts to Nexus repository
                // ...
            }
        }
    }
}
